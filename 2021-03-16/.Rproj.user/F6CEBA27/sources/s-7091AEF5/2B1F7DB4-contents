---
title: "TidyTemplate"
date: 2021-03-08
output: html_output
---

# TidyTuesday

Join the R4DS Online Learning Community in the weekly #TidyTuesday event!
Every week we post a raw dataset, a chart or article related to that dataset, and ask you to explore the data.
While the dataset will be “tamed”, it will not always be tidy! As such you might need to apply various R for Data Science techniques to wrangle the data into a true tidy format.
The goal of TidyTuesday is to apply your R skills, get feedback, explore other’s work, and connect with the greater #RStats community!
As such we encourage everyone of all skills to participate!

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(tidytuesdayR)
library(scales)
library(magrittr)
library(jsonlite)
library(stringr)
library(ggrepel)
library(extrafont)

theme_set(theme_minimal())


```

# Load the weekly Data

Dowload the weekly data and make available in the `tt` object.

```{r Load}

tt <- tt_load("2021-03-09")

```


# Readme

Take a look at the readme for the weekly data to get insight on the dataset.
This includes a data dictionary, source, and a link to an article on the data.

```{r Readme, eval = interactive()}

tt

```


# Glimpse Data

Take an initial look at the format of the data available.

```{r Glimpse}

tt %>% 
  map(glimpse)
bechdel <- tt$raw_bechdel
movies <- tt$movies
bechdel %>% head(20)
bechdel %>% dim

```

# Cleaning Script

```{r Cleaning, eval=FALSE}

raw_json <- jsonlite::parse_json(url("http://bechdeltest.com/api/v1/getAllMovies"))

all_movies <- raw_json %>% 
  map_dfr(~as.data.frame(.x, stringsAsFactors = FALSE)) %>% 
  rename(imdb_id = imdbid) %>% 
  tibble()

all_movies %>% 
  filter(year >= 1970) 



cleaned_bechdel <- all_movies %>% 
  mutate(title = case_when(
    str_detect(title, ", The") ~ str_remove(title, ", The") %>% paste("The", .),
    TRUE ~ str_replace(title, "&#39;", "’")
  ))

# cleaned_bechdel %>% 
#   write_csv("2021/2021-03-09/raw_bechdel.csv")

# IMDB data ---------------------------------------------------------------


imdb_json <- jsonlite::parse_json(url("https://raw.githubusercontent.com/brianckeegan/Bechdel/master/imdb_data.json"))

all_imdb <- imdb_json %>%
  map_dfr(~as.data.frame(.x, stringsAsFactors = FALSE))

cleaned_imdb <- all_imdb %>% 
  janitor::clean_names() %>% 
  mutate(metascore = parse_number(metascore),
         imdb_rating = parse_number(imdb_rating),
         year = as.integer(year)) %>% 
  mutate(imdb_id = str_remove(imdb_id, "tt")) %>% 
  tibble()

all_imdb

# 538 Data ----------------------------------------------------------------

movies <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/bechdel/movies.csv")

cleaned_movies <- movies %>% 
  mutate(imdb_id = str_remove(imdb, "tt")) 

combo_movies <- cleaned_movies %>% 
  left_join(cleaned_imdb) %>% 
  janitor::clean_names() 

combo_movies

combo_movies %>% 
  write_csv("2021/2021-03-09/movies.csv")
```


# Wrangle

Explore the data and process it into a nice format for plotting! Access each dataset by name by using a dollarsign after the `tt` object and then the name of the data set.

```{r Wrangle}

bechdel <- tt$raw_bechdel
movies <- tt$movies
font_import()

bm <- left_join(bechdel, movies, by=c("title","year"))

```

# Visualize

SF Hollywood font from [https://www.dafont.com/hollywood-hills.font](https://www.dafont.com/hollywood-hills.font)


```{r Visualize}

bm %>% 
  filter(!is.na(actors)) %>%
  filter(year >= 1990) %>% 
  separate(actors, paste0("actors", 1:4), ",") %>% 
  pivot_longer(contains("actors"), names_to="actor.num", values_to="actor.name") %>% 
  mutate(actor.name = str_trim(actor.name) %>% factor,
         binary = recode_factor(binary, "PASS" = "TRUE", "FAIL" = "FALSE") %>% as.logical) %>%
  group_by(actor.name) %>% 
  filter(!is.na(actor.name)) %>% 
  summarize(n = n(),
            year = min(year),
            bechdel.actor = sum(binary),
            metascore.actor = mean(metascore, na.rm = TRUE),
            bechdel.ratio = bechdel.actor/n) %>% 
  filter(n >= 12) %>% 
  arrange(desc(bechdel.ratio)) %>% 
  ggplot(aes(metascore.actor, bechdel.ratio, label=actor.name)) +
  geom_hline(yintercept = .5, color="gray30") +
  geom_vline(aes(xintercept = mean(metascore.actor)), color="gray30") +
  geom_text_repel(aes(size = log(n)*6, family = "SF Hollywood Hills"), force = 2) +
  geom_point(aes(size = n)) +
  scale_y_continuous(labels = scales::percent_format()) +
  annotate(
    geom = 'curve',
    xend = 63, yend = .618, x = 75, y = 0.8,
    curvature = -.25,ncp = 9, lwd = 1.5,
    arrow = arrow(length = unit(1/2, 'lines')),
    color = 'limegreen')  +
  annotate(
    geom = 'text',
    family = "SF Hollywood Hills",
    x = 67,
    y = .82,
    size= 9/2.8,
    label = "Only Tom Wilkinson appeared in more than twelve films, passed the Bechdel test more than half the time, and had an average film metascore above the group mean" %>%
    str_wrap(35), hjust = 0, vjust = 0, color = 'limegreen') +
  expand_limits(x=c(40, 80), y = c(0,1)) +
  labs(title = "Actors by Bechdel Test Ratio and Average Film Metascore",
       subtitle = "Twelve or more film appearances in the data set",
       x = "Actor's Average Film Metascore",
       y = "Percent of Films that Pass the Bechdel Test",
       size = "Number of Films",
       color = "Decade in Which Actor First Appears") +
  theme(panel.grid = element_blank(),
        plot.title = element_text(hjust = 0.5, size = 20),
        plot.subtitle = element_text(hjust = 0.5),
        text = element_text(size = 14, family = "SF Hollywood Hills"),
        legend.position = "right")
  
```

# Save Image

Save your image for sharing. Be sure to use the `#TidyTuesday` hashtag in your post on twitter! 

```{r}

# This will save your most recent plot
ggsave(
  filename = "Bechdel_2021_03_09_Gutierrez.png",
  device = "png")

```
